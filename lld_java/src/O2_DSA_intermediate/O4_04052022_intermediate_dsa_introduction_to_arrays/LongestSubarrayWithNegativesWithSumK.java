package O2_DSA_intermediate.O4_04052022_intermediate_dsa_introduction_to_arrays;

import java.util.HashMap;
import java.util.Map;

public class LongestSubarrayWithNegativesWithSumK {

    public static void main(String[] args) {
        int[]nums = {-933,287,-826,-396,493,-944,759,-898,-778,25,-602,-505,755,-175,-306,370,552,552,528,190,-471,-100,396,622,-435,-544,215,-13,378,-58,850,-994,-791,472,-734,-554,-68,-631,843,15,749,-134,-526,-854,119,-560,-488,786,588,431,913,278,-139,-861,639,-247,-153,-947,-542,-656,741,-314,-602,-861,125,387,779,-554,-858,877,830,-963,-999,870,-961,-331,-904,770,-471,-661,748,-173,-177,-202,-637,-31,310,-237,763,687,-721,-602,719,739,75,214,216,3,234,222,717,-13,672,247,933,869,-479,-534,-581,808,-552,-885,-35,-868,-719,377,-156,155,-457,181,-87,485,481,687,-621,-172,-108,391,-555,628,-349,-842,-574,321,-563,-130,797,787,592,715,-254,-991,-666,-153,226,68,548,165,-213,675,-907,-67,-542,917,852,773,225,-612,724,477,828,656,-965,-330,474,216,818,783,652,-368,-88,-887,918,-458,-124,-583,-927,-55,-122,-413,109,-280,-669,-156,858,-473,-824,242,181,-932,-184,-72,681,-937,-112,-58,-263,-285,-634,13,117,750,-112,-616,205,-964,624,-396,354,414,769,-661,-592,-60,496,889,881,-790,982,-546,113,477,-722,-402,-620,415,-47,-68,-970,-678,751,-270,357,67,-82,775,-945,-669,-253,339,-529,-795,209,-109,-292,-308,-809,-64,848,686,535,292,807,934,-161,-258,-144,364,216,624,92,-496,513,256,98,-646,-862,-699,-150,-26,537,695,879,-613,679,-512,-534,-448,389,761,635,-988,348,410,731,-281,-156,510,89,-103,-97,-730};
        System.out.println(nums.length);
        int k = 1814;
        System.out.println(getLongestSubarray(nums, k));
    }
    public static int getLongestSubarray(int []a, int k) {
        // Write your code here.
        int n = a.length;
        Map<Integer, Integer> preSumMap = new HashMap<>();
        int maxLen = 0;
        int sum = 0;

        for(int i = 0; i < n; i++) {

            sum += a[i];

            // First check for the k
            if(sum == k) {
                maxLen = Math.max(maxLen, i+1);
            }

            int rem = sum - k;

            // Second check for the k
            if(preSumMap.containsKey(rem)) {
                int len = i - preSumMap.get(rem);
                maxLen = Math.max(maxLen, len);
            }

            // Filling preSumMap
            if(!preSumMap.containsKey(rem)){
                preSumMap.put(sum, i);
            }

        }
        return maxLen;
    }

}
